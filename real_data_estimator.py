2023Q1,552123.4,314123.4,93234.5,22012.3,3478.9,111567.8,28123.4,-455.6,104123.4,112456.7,1.050,1.049,1.040,1.040,1.040,1.040,1.029,4.2,6943,6614,5416,100.9,0.01,0.48,122.7,1054901.2,1.038,298901.2,74012.3,365901.2,528012.3,1465678.9,51123.4,26789.0,14556.7,84012.3,10274,2677,5454,99.5,101.0,102.1,2.22,1.025,58.8,0.10,102.5,1.006,88112.3,43456.7,1455.6,455.6,0.315,0.145,11123.4,102555.5,0.30,0.18,0.65,1.86,549500.0,44567.8,0.156,1454567.8,609123.4,474789.0,16789.0,11123.4,27901.2,4778.9,43456.7,43456.7,1874000,2043456.7,374000,390123.4,44400,67901.2,0.815,291.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.9
2023Q2,553345.6,314901.2,94012.3,22234.5,3545.6,111678.9,28234.5,-466.7,104789.0,113012.3,1.051,1.050,1.041,1.041,1.041,1.041,1.031,4.1,6954,6627,5428,101.2,0.01,0.46,123.3,1058234.5,1.051,300234.5,74789.0,367234.5,531123.4,1476789.0,51456.7,27012.3,14667.8,84234.5,10276,2688,5465,99.7,101.1,102.3,2.20,1.027,57.5,0.10,103.0,1.009,89123.4,43901.2,1466.7,466.7,0.316,0.146,11234.5,103000.0,0.30,0.18,0.65,1.99,550500.0,45678.9,0.158,1465678.9,612567.8,478345.6,17012.3,11234.5,28123.4,4845.6,43901.2,43901.2,1876000,2054567.8,376000,392345.6,44600,69012.3,0.815,292.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.8
2023Q3,554567.8,315678.9,94789.0,22456.7,3612.3,111789.0,28345.6,-477.8,105456.7,113567.8,1.053,1.052,1.042,1.042,1.042,1.042,1.033,4.0,6965,6640,5440,101.5,0.01,0.44,123.9,1061567.8,1.064,301567.8,75567.8,368567.8,534234.5,1487901.2,51789.0,27234.5,14778.9,84456.7,10278,2699,5476,99.9,101.2,102.5,2.18,1.029,56.2,0.10,103.5,1.012,90134.5,44345.6,1477.8,477.8,0.317,0.147,11345.6,103444.4,0.30,0.18,0.65,2.12,551500.0,46789.0,0.160,1476789.0,616012.3,481901.2,17234.5,11345.6,28345.6,4912.3,44345.6,44345.6,1878000,2065678.9,378000,394567.8,44800,70123.4,0.815,292.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.7
2023Q4,555789.0,316456.7,95567.8,22678.9,3678.9,111901.2,28456.7,-489.0,106123.4,114123.4,1.054,1.053,1.043,1.043,1.043,1.043,1.035,3.9,6976,6653,5452,101.8,0.01,0.42,124.5,1064901.2,1.077,302901.2,76345.6,369901.2,537345.6,1499012.3,52123.4,27456.7,14890.1,84678.9,10280,2710,5487,100.1,101.3,102.7,2.16,1.031,54.9,0.10,104.0,1.015,91145.6,44789.0,1489.0,489.0,0.318,0.148,11456.7,103888.9,0.30,0.18,0.65,2.25,552500.0,47901.2,0.162,1487890.1,619456.7,485456.7,17456.7,11456.7,28567.8,4978.9,44789.0,44789.0,1880000,2076789.0,380000,396789.0,45000,71234.5,0.815,293.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.6"""
    
    try:
        with open('initial_values_dummy.csv', 'w', encoding='utf-8') as f:
            f.write(csv_content)
        print("initial_values_dummy.csv ファイルを作成しました。")
        return True
    except Exception as e:
        print(f"CSVファイルの作成に失敗しました: {e}")
        return False


# 実行時の指示とヘルプ
def show_usage():
    """使用方法の表示"""
    print("""
【実データパラメータ推定プログラム】

このプログラムの特徴:
✓ 実際のデータから統計的にパラメータを推定
✓ デフォルト値やハードコーディングされた値は使用しない
✓ 推定に失敗した場合はNoneを返し、透明性を保つ
✓ R-squared、t値などの統計的信頼性を報告

使用方法:
1. 同じディレクトリに 'initial_values_dummy.csv' を配置
2. python real_data_estimator.py を実行
3. estimated_parameters_real.json ファイルが生成される

推定される経済関係:
• 消費関数: エラー修正モデル（ECM）
• 設備投資: トービンのq理論
• 輸出関数: 世界需要・為替レート弾力性
• フィリップス曲線: インフレ慣性・GDPギャップ
• テイラールール: 金融政策反応関数
• 労働市場: オークン法則

出力の見方:
• パラメータ値: 実際の推定値のみ
• None: 統計的に推定不可能
• R-squared: モデルの説明力
• t値: 係数の統計的有意性
    """)


# 使用例とメイン実行部分
if __name__ == "__main__":
    import sys
    
    # CSVデータ（ナレッジから）
    csv_data = """Date,GDP,CP,IFP,IHP,INP,CG,IG,ING,XGS,MGS,PGDP,PCP,PIFP,PIHP,PXGS,PMGS,CGPI,UR,LF,LE,LW,LHX,RCD,RGB,FXS,M2CD,PSHARE,YWV,YCV,YDV,NIV,NWCV,TYPV,TYCV,TCIV,ITAXV,POP,POP65,HH,WD_YVI,WD_PX,WD_PI,US_RGB,US_WPI,POILD,RTCI,CUX,PLAND,BSSV,CSSV,SUBV,SDV,ETT,ITR,FUEL,NFMGS,TT,SR,IR,GDPGAP,GDPPOT,BCV,BCVATGDPV,SBCV,FASSTV,FLIABV,RTRIV,PTRIV,YIEV,YIGV,YICV,CCAV,KFP,KFPV,KHP,KHPV,KG,KGV,RLEW,WPHXREQ,LHXEQ,UREQ,CUXEQ,REQU,SLRATIO,ROR,TINCR,inflation_rate
2020Q1,541234.5,306789.0,86789.0,20123.4,2867.8,110234.5,26789.0,-322.3,98456.7,107890.1,1.031,1.031,1.028,1.028,1.028,1.028,1.005,4.7,6811,6489,5298,98.5,0.10,0.75,115.5,1014901.2,0.912,286901.2,67234.5,353456.7,490678.9,1333456.7,47890.1,24678.9,13223.4,81345.6,10250,2545,5322,97.1,99.8,99.7,2.50,1.001,75.5,0.10,98.2,0.970,75978.9,38123.4,1322.3,322.3,0.303,0.133,9789.0,98555.5,0.30,0.18,0.65,0.31,535000.0,23456.7,0.127,1322345.6,567890.1,432109.8,12345.6,8901.2,23456.7,3456.7,34567.8,34567.8,1850000,1911234.5,350000,363456.7,42000,54567.8,0.815,285.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,2.1
2020Q2,536789.0,303456.7,84567.8,19678.9,2756.7,110345.6,26901.2,-333.4,96234.5,106345.6,1.033,1.033,1.029,1.029,1.029,1.029,1.007,5.3,6822,6456,5276,97.2,0.08,0.70,116.1,1018234.5,0.895,284234.5,65456.7,351234.5,493789.0,1344567.8,47456.7,24345.6,13334.5,81567.8,10252,2556,5333,97.3,99.9,99.9,2.45,1.003,73.2,0.10,96.5,0.973,76989.0,38567.8,1333.4,333.4,0.304,0.134,9901.2,97666.6,0.30,0.18,0.65,-0.15,536500.0,32345.6,0.134,1333456.7,571234.5,435678.9,14345.6,9901.2,25456.7,4045.6,38567.8,38567.8,1852000,1922345.6,352000,365678.9,42200,55678.9,0.815,286.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,2.0
2020Q3,538901.2,305234.5,85678.9,19890.1,2834.5,110456.7,27012.3,-344.5,97456.7,107012.3,1.035,1.034,1.030,1.030,1.030,1.030,1.009,5.2,6833,6478,5294,97.8,0.07,0.68,116.7,1021567.8,0.908,285567.8,66234.5,352567.8,496901.2,1355678.9,47789.0,24567.8,13445.6,81789.0,10254,2567,5344,97.5,100.0,100.1,2.42,1.005,71.8,0.10,97.3,0.976,78001.2,39012.3,1344.5,344.5,0.305,0.135,10012.3,98111.1,0.30,0.18,0.65,0.42,538000.0,33456.7,0.136,1344567.8,574678.9,439234.5,14567.8,10012.3,25678.9,4112.3,39012.3,39012.3,1854000,1933456.7,354000,367901.2,42400,56789.0,0.815,286.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.9
2020Q4,540123.4,306123.4,86234.5,20012.3,2901.2,110567.8,27123.4,-355.6,98123.4,107456.7,1.036,1.035,1.031,1.031,1.031,1.031,1.011,5.1,6844,6495,5308,98.2,0.06,0.66,117.3,1024901.2,0.921,286901.2,67012.3,353901.2,500012.3,1366789.0,48123.4,24789.0,13556.7,82012.3,10256,2578,5355,97.7,100.1,100.3,2.40,1.007,70.5,0.10,98.0,0.979,79012.3,39456.7,1355.6,355.6,0.306,0.136,10123.4,98555.5,0.30,0.18,0.65,0.55,539500.0,34567.8,0.138,1355678.9,578123.4,442789.0,14789.0,10123.4,25901.2,4178.9,39456.7,39456.7,1856000,1944567.8,356000,370123.4,42600,57901.2,0.815,287.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.8
2021Q1,542345.6,307890.1,87012.3,20234.5,2945.6,110678.9,27234.5,-366.7,98789.0,108012.3,1.038,1.037,1.032,1.032,1.032,1.032,1.013,5.0,6855,6510,5320,98.5,0.05,0.64,117.9,1028234.5,0.934,288234.5,67789.0,355234.5,503123.4,1377890.1,48456.7,25012.3,13667.8,82234.5,10258,2589,5366,97.9,100.2,100.5,2.38,1.009,69.2,0.10,98.5,0.982,80023.4,39901.2,1366.7,366.7,0.307,0.137,10234.5,99000.0,0.30,0.18,0.65,0.82,541000.0,35678.9,0.140,1366789.0,581567.8,446345.6,15012.3,10234.5,26123.4,4245.6,39901.2,39901.2,1858000,1955678.9,358000,372345.6,42800,59012.3,0.815,287.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.7
2021Q2,543567.8,308678.9,87789.0,20456.7,3012.3,110789.0,27345.6,-377.8,99456.7,108567.8,1.039,1.038,1.033,1.033,1.033,1.033,1.015,4.9,6866,6523,5332,98.8,0.04,0.62,118.5,1031567.8,0.947,289567.8,68567.8,356567.8,506234.5,1388901.2,48789.0,25234.5,13778.9,82456.7,10260,2600,5377,98.1,100.3,100.7,2.36,1.011,67.9,0.10,99.0,0.985,81034.5,40345.6,1377.8,377.8,0.308,0.138,10345.6,99444.4,0.30,0.18,0.65,0.95,542500.0,36789.0,0.142,1377890.1,585012.3,449901.2,15234.5,10345.6,26345.6,4312.3,40345.6,40345.6,1860000,1966789.0,360000,374567.8,43000,60123.4,0.815,288.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.6
2021Q3,544789.0,309456.7,88567.8,20678.9,3078.9,110901.2,27456.7,-389.0,100123.4,109123.4,1.041,1.040,1.034,1.034,1.034,1.034,1.017,4.8,6877,6536,5344,99.1,0.03,0.60,119.1,1034901.2,0.960,290901.2,69345.6,357901.2,509345.6,1399012.3,49123.4,25456.7,13890.1,82678.9,10262,2611,5388,98.3,100.4,100.9,2.34,1.013,66.6,0.10,99.5,0.988,82045.6,40789.0,1389.0,389.0,0.309,0.139,10456.7,99888.9,0.30,0.18,0.65,1.08,543500.0,37901.2,0.144,1388901.2,588456.7,453456.7,15456.7,10456.7,26567.8,4378.9,40789.0,40789.0,1862000,1977890.1,362000,376789.0,43200,61234.5,0.815,288.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.5
2021Q4,546012.3,310234.5,89345.6,20901.2,3145.6,111012.3,27567.8,-400.1,100789.0,109678.9,1.042,1.041,1.035,1.035,1.035,1.035,1.019,4.7,6888,6549,5356,99.4,0.02,0.58,119.7,1038234.5,0.973,292234.5,70123.4,359234.5,512456.7,1410123.4,49456.7,25678.9,14001.2,82901.2,10264,2622,5399,98.5,100.5,101.1,2.32,1.015,65.3,0.10,100.0,0.991,83056.7,41234.5,1400.1,400.1,0.310,0.140,10567.8,100333.3,0.30,0.18,0.65,1.21,544500.0,39012.3,0.146,1399012.3,591901.2,457012.3,15678.9,10567.8,26789.0,4445.6,41234.5,41234.5,1864000,1988901.2,364000,379012.3,43400,62345.6,0.815,289.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.4
2022Q1,547234.5,311012.3,90123.4,21123.4,3212.3,111123.4,27678.9,-411.2,101456.7,110234.5,1.044,1.043,1.036,1.036,1.036,1.036,1.021,4.6,6899,6562,5368,99.7,0.01,0.56,120.3,1041567.8,0.986,293567.8,70901.2,360567.8,515567.8,1421234.5,49789.0,25901.2,14112.3,83123.4,10266,2633,5410,98.7,100.6,101.3,2.30,1.017,64.0,0.10,100.5,0.994,84067.8,41678.9,1411.2,411.2,0.311,0.141,10678.9,100777.8,0.30,0.18,0.65,1.34,545500.0,40123.4,0.148,1410123.4,595345.6,460567.8,15901.2,10678.9,27012.3,4512.3,41678.9,41678.9,1866000,1999012.3,366000,381234.5,43600,63456.7,0.815,289.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.3
2022Q2,548456.7,311789.0,90901.2,21345.6,3278.9,111234.5,27789.0,-422.3,102123.4,110789.0,1.045,1.044,1.037,1.037,1.037,1.037,1.023,4.5,6910,6575,5380,100.0,0.01,0.54,120.9,1044901.2,0.999,294901.2,71678.9,361901.2,518678.9,1432345.6,50123.4,26123.4,14223.4,83345.6,10268,2644,5421,98.9,100.7,101.5,2.28,1.019,62.7,0.10,101.0,0.997,85078.9,42123.4,1422.3,422.3,0.312,0.142,10789.0,101222.2,0.30,0.18,0.65,1.47,546500.0,41234.5,0.150,1421234.5,598789.0,464123.4,16123.4,10789.0,27234.5,4578.9,42123.4,42123.4,1868000,2010123.4,368000,383456.7,43800,64567.8,0.815,290.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.2
2022Q3,549678.9,312567.8,91678.9,21567.8,3345.6,111345.6,27901.2,-433.4,102789.0,111345.6,1.047,1.046,1.038,1.038,1.038,1.038,1.025,4.4,6921,6588,5392,100.3,0.01,0.52,121.5,1048234.5,1.012,296234.5,72456.7,363234.5,521789.0,1443456.7,50456.7,26345.6,14334.5,83567.8,10270,2655,5432,99.1,100.8,101.7,2.26,1.021,61.4,0.10,101.5,1.000,86089.0,42567.8,1433.4,433.4,0.313,0.143,10901.2,101666.7,0.30,0.18,0.65,1.60,547500.0,42345.6,0.152,1432345.6,602234.5,467678.9,16345.6,10901.2,27456.7,4645.6,42567.8,42567.8,1870000,2021234.5,370000,385678.9,44000,65678.9,0.815,290.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.1
2022Q4,550901.2,313345.6,92456.7,21789.0,3412.3,111456.7,28012.3,-444.5,103456.7,111901.2,1.048,1.047,1.039,1.039,1.039,1.039,1.027,4.3,6932,6601,5404,100.6,0.01,0.50,122.1,1051567.8,1.025,297567.8,73234.5,364567.8,524901.2,1454567.8,50789.0,26567.8,14445.6,83789.0,10272,2666,5443,99.3,100.9,101.9,2.24,1.023,60.1,0.10,102.0,1.003,87101.2,43012.3,1444.5,444.5,0.314,0.144,11012.3,102111.1,0.30,0.18,0.65,1.73,548500.0,43456.7,0.154,1443456.7,605678.9,471234.5,16567.8,11012.3,27678.9,4712.3,43012.3,43012.3,1872000,2032345.6,372000,387901.2,44200,66789.0,0.815,291.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.0
2023Q1,552123.4,314123.4,93234.5,22012.3,3478.9,111567.8,28123.4,-455.6,104123.4,112456.7,1.050,1.049,1.040,1.040,1.040,1.040,1.029,4.2,6943,6614,5416,100.9,0.01,0.48,122.7,1054901.2,1.038,298901.2,74012.3,365901.2,528012.3,1465678.9,51123.4,26789.0,14556.7,84012.3,10274,2677,5454,99.5,101.0,102.1,2.22,1.025,58.8,0.10,102.5,1.006,88112.3,43456.7,1455.6,455.6,0.315,0.145,11123.4,102555.5,0.30,0.18,0.65,1.86,549500.0,44567.8,0.156,1454567.8,609123.4,474789.0,16789.0,11123.4,27901.2,4778.9,43456.7,43456.7,1874000,2043456.7,374000,390123.4,44400,67901.2,0.815,291.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.9
2023Q2,553345.6,314901.2,94012.3,22234.5,3545.6,111678.9,28234.5,-466.7,104789.0,113012.3,1.051,1.050,1.041,1.041,1.041,1.041,1.031,4.1,6954,6627,5428,101.2,0.01,0.46,123.3,1058234.5,1.051,300234.5,74789.0,367234.5,531123.4,1476789.0,51456.7,27012.3,14667.8,84234.5,10276,2688,5465,99.7,101.1,102.3,2.20,1.027,57.5,0.10,103.0,1.009,89123.4,43901.2,1466.7,466.7,0.316,0.146,11234.5,103000.0,0.30,0.18,0.65,1.99,550500.0,45678.9,0.158,1465678.9,612567.8,478345.6,17012.3,11234.5,28123.4,4845.6,43901.2,43901.2,1876000,2054567.8,376000,392345.6,44600,69012.3,0.815,292.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,0.8
2023Q3,554567.8,315678.9,94789.0,22456.7,3612.3,111789.0,28345.6,-477.8,105456.7,113567.8,1.053,1.052,1.042,1.042,1.042,1.042,1.033,4.0,6965,6640,5440,101.5,0.01,0.44,123.9,1061567.8,1.064,301567.8,75567.8,368567.8,534234.5,1            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquared_adj:.4f}")
            
            print(f"\n推定結果:")
            for var in explanatory_vars:
                if var in model.params.index:
                    coef = model.params[var]
                    t_val = model.tvalues[var]
                    print(f"  {var}: {coef:.4f} (t値: {t_val:.2f})")
            
            # パラメータの解釈（テイラールール形式に変換）
            smoothing = model.params.get('RCD_lag1', 0)
            raw_inflation_coef = model.params.get('inflation_gap', 0)
            raw_gap_coef = model.params.get('GDPGAP', 0)
            
            # 長期係数に変換（if smoothing < 1）
            if smoothing < 0.99:
                inflation_coefficient = raw_inflation_coef / (1 - smoothing)
                gap_coefficient = raw_gap_coef / (1 - smoothing)
            else:
                inflation_coefficient = raw_inflation_coef
                gap_coefficient = raw_gap_coef
            
            print(f"\nテイラールール解釈:")
            print(f"  金利慣性: {smoothing:.4f}")
            print(f"  インフレ反応係数: {inflation_coefficient:.4f}")
            print(f"  産出ギャップ反応係数: {gap_coefficient:.4f}")
            
            self.parameters['taylor_rule'] = {
                'smoothing': float(smoothing) if not np.isnan(smoothing) else None,
                'inflation_coefficient': float(inflation_coefficient) if not np.isnan(inflation_coefficient) else None,
                'gap_coefficient': float(gap_coefficient) if not np.isnan(gap_coefficient) else None
            }
            
            self.estimation_results['taylor_rule'] = {
                'model': model,
                'sample_size': len(taylor_data),
                'r_squared': model.rsquared
            }
            
            print(f"\n✓ テイラールールの推定が完了しました")
            return True
            
        except Exception as e:
            print(f"テイラールール推定でエラーが発生しました: {e}")
            return False
    
    def estimate_labor_market(self):
        """労働市場のパラメータ推定（実データベース）"""
        print("\n" + "=" * 50)
        print("6. 労働市場の推定")
        print("=" * 50)
        
        if 'UR' not in self.data.columns:
            print("エラー: UR（失業率）が見つかりません")
            return False
        
        # 失業率の差分
        self.data['d_UR'] = self.data['UR'].diff()
        
        # 説明変数の準備
        explanatory_vars = []
        
        # 稼働率の変化
        if 'CUX' in self.data.columns:
            self.data['dlog_CUX'] = self.data['CUX'].pct_change()
            explanatory_vars.append('dlog_CUX')
        
        # 失業率変化のラグ（調整速度）
        self.data['d_UR_lag1'] = self.data['d_UR'].shift(1)
        explanatory_vars.append('d_UR_lag1')
        
        # GDPギャップの影響
        if 'GDPGAP' in self.data.columns:
            explanatory_vars.append('GDPGAP')
        
        if not explanatory_vars:
            print("エラー: 有効な説明変数が見つかりません")
            return False
        
        model_vars = ['d_UR'] + explanatory_vars
        labor_data = self.data[model_vars].dropna()
        
        if len(labor_data) < 5:
            print(f"エラー: 有効なデータが不足しています（{len(labor_data)}行）")
            return False
        
        print(f"使用データ: {len(labor_data)}行")
        print(f"説明変数: {explanatory_vars}")
        
        try:
            y = labor_data['d_UR']
            X = labor_data[explanatory_vars]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X).fit()
            
            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquared_adj:.4f}")
            
            print(f"\n推定結果:")
            for var in explanatory_vars:
                if var in model.params.index:
                    coef = model.params[var]
                    t_val = model.tvalues[var]
                    print(f"  {var}: {coef:.4f} (t値: {t_val:.2f})")
            
            capacity_sensitivity = model.params.get('dlog_CUX', np.nan)
            adjustment_speed = model.params.get('d_UR_lag1', np.nan)
            gdp_effect = model.params.get('GDPGAP', np.nan)
            
            self.parameters['labor_market'] = {
                'capacity_sensitivity': float(capacity_sensitivity) if not np.isnan(capacity_sensitivity) else None,
                'adjustment_speed': float(adjustment_speed) if not np.isnan(adjustment_speed) else None,
                'gdp_gap_effect': float(gdp_effect) if not np.isnan(gdp_effect) else None
            }
            
            self.estimation_results['labor_market'] = {
                'model': model,
                'sample_size': len(labor_data),
                'r_squared': model.rsquared
            }
            
            print(f"\n✓ 労働市場の推定が完了しました")
            return True
            
        except Exception as e:
            print(f"労働市場推定でエラーが発生しました: {e}")
            return False
    
    def estimate_all(self):
        """全てのパラメータを実データから推定"""
        print("=" * 70)
        print("実データからのマクロ経済パラメータ推定")
        print("=" * 70)
        
        if self.data is None:
            print("エラー: データが読み込まれていません")
            return
        
        # 推定の実行
        results = {}
        results['consumption'] = self.estimate_consumption_function()
        results['investment'] = self.estimate_investment_function()
        results['export'] = self.estimate_export_function()
        results['phillips_curve'] = self.estimate_phillips_curve()
        results['taylor_rule'] = self.estimate_taylor_rule()
        results['labor_market'] = self.estimate_labor_market()
        
        # 推定結果のサマリー
        print("\n" + "=" * 70)
        print("推定結果サマリー")
        print("=" * 70)
        
        successful_estimations = sum(results.values())
        total_estimations = len(results)
        
        print(f"推定成功: {successful_estimations}/{total_estimations} 関数")
        
        for function_name, success in results.items():
            status = "✓ 成功" if success else "✗ 失敗"
            print(f"  {function_name}: {status}")
        
        if successful_estimations == 0:
            print("\nエラー: 推定に成功した関数がありません")
            print("データの確認をお願いします")
            return
        
        print(f"\n推定されたパラメータ:")
        self.print_estimated_parameters()
    
    def print_estimated_parameters(self):
        """推定されたパラメータのみを表示（Noneは除外）"""
        print("\n" + "=" * 50)
        print("推定パラメータ（実データベース）")
        print("=" * 50)
        
        for category, params in self.parameters.items():
            if params:  # 空でない場合のみ表示
                print(f"\n{category.upper()}:")
                for param_name, value in params.items():
                    if value is not None:  # Noneでない場合のみ表示
                        print(f"  {param_name}: {value:.4f}")
                    else:
                        print(f"  {param_name}: 推定不可")
    
    def get_model_diagnostics(self):
        """推定されたモデルの診断情報を取得"""
        diagnostics = {}
        
        for function_name, result in self.estimation_results.items():
            if result:
                diagnostics[function_name] = {
                    'sample_size': result.get('sample_size', 0),
                    'r_squared': result.get('r_squared', 0),
                    'successful': True
                }
            else:
                diagnostics[function_name] = {
                    'sample_size': 0,
                    'r_squared': 0,
                    'successful': False
                }
        
        return diagnostics
    
    def save_parameters(self, filename='estimated_parameters_real.json'):
        """実際に推定されたパラメータのみを保存"""
        # Noneを除去したクリーンなパラメータ
        clean_parameters = {}
        
        for category, params in self.parameters.items():
            clean_params = {}
            for key, value in params.items():
                if value is not None:
                    clean_params[key] = float(value)
            
            if clean_params:  # 空でない場合のみ追加
                clean_parameters[category] = clean_params
        
        # 推定の詳細情報も追加
        metadata = {
            'estimation_method': 'real_data_ols',
            'data_period': f"{self.data.index[0].strftime('%Y-%m')} to {self.data.index[-1].strftime('%Y-%m')}",
            'total_observations': len(self.data),
            'diagnostics': self.get_model_diagnostics()
        }
        
        output_data = {
            'parameters': clean_parameters,
            'metadata': metadata
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(output_data, f, indent=4, ensure_ascii=False)
            
            print(f"\n✓ 推定パラメータを {filename} に保存しました")
            return clean_parameters
            
        except Exception as e:
            print(f"\nパラメータ保存でエラー: {e}")
            return clean_parameters


# CSVファイル作成用のヘルパー関数
def create_sample_csv_file():
    """サンプルCSVファイルを作成"""
    csv_content = """Date,GDP,CP,IFP,IHP,INP,CG,IG,ING,XGS,MGS,PGDP,PCP,PIFP,PIHP,PXGS,PMGS,CGPI,UR,LF,LE,LW,LHX,RCD,RGB,FXS,M2CD,PSHARE,YWV,YCV,YDV,NIV,NWCV,TYPV,TYCV,TCIV,ITAXV,POP,POP65,HH,WD_YVI,WD_PX,WD_PI,US_RGB,US_WPI,POILD,RTCI,CUX,PLAND,BSSV,CSSV,SUBV,SDV,ETT,ITR,FUEL,NFMGS,TT,SR,IR,GDPGAP,GDPPOT,BCV,BCVATGDPV,SBCV,FASSTV,FLIABV,RTRIV,PTRIV,YIEV,YIGV,YICV,CCAV,KFP,KFPV,KHP,KHPV,KG,KGV,RLEW,WPHXREQ,LHXEQ,UREQ,CUXEQ,REQU,SLRATIO,ROR,TINCR,inflation_rate
2020Q1,541234.5,306789.0,86789.0,20123.4,2867.8,110234.5,26789.0,-322.3,98456.7,107890.1,1.031,1.031,1.028,1.028,1.028,1.028,1.005,4.7,6811,6489,5298,98.5,0.10,0.75,115.5,1014901.2,0.912,286901.2,67234.5,353456.7,490678.9,1333456.7,47890.1,24678.9,13223.4,81345.6,10250,2545,5322,97.1,99.8,99.7,2.50,1.001,75.5,0.10,98.2,0.970,75978.9,38123.4,1322.3,322.3,0.303,0.133,9789.0,98555.5,0.30,0.18,0.65,0.31,535000.0,23456.7,0.127,1322345.6,567890.1,432109.8,12345.6,8901.2,23456.7,3456.7,34567.8,34567.8,1850000,1911234.5,350000,363456.7,42000,54567.8,0.815,285.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,2.1
2020Q2,536789.0,303456.7,84567.8,19678.9,2756.7,110345.6,26901.2,-333.4,96234.5,106345.6,1.033,1.033,1.029,1.029,1.029,1.029,1.007,5.3,6822,6456,5276,97.2,0.08,0.70,116.1,1018234.5,0.895,284234.5,65456.7,351234.5,493789.0,1344567.8,47456.7,24345.6,13334.5,81567.8,10252,2556,5333,97.3,99.9,99.9,2.45,1.003,73.2,0.10,96.5,0.973,76989.0,38567.8,1333.4,333.4,0.304,0.134,9901.2,97666.6,0.30,0.18,0.65,-0.15,536500.0,32345.6,0.134,1333456.7,571234.5,435678.9,14345.6,9901.2,25456.7,4045.6,38567.8,38567.8,1852000,1922345.6,352000,365678.9,42200,55678.9,0.815,286.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,2.0
2020Q3,538901.2,305234.5,85678.9,19890.1,2834.5,110456.7,27012.3,-344.5,97456.7,107012.3,1.035,1.034,1.030,1.030,1.030,1.030,1.009,5.2,6833,6478,5294,97.8,0.07,0.68,116.7,1021567.8,0.908,285567.8,66234.5,352567.8,496901.2,1355678.9,47789.0,24567.8,13445.6,81789.0,10254,2567,5344,97.5,100.0,100.1,2.42,1.005,71.8,0.10,97.3,0.976,78001.2,39012.3,1344.5,344.5,0.305,0.135,10012.3,98111.1,0.30,0.18,0.65,0.42,538000.0,33456.7,0.136,1344567.8,574678.9,439234.5,14567.8,10012.3,25678.9,4112.3,39012.3,39012.3,1854000,1933456.7,354000,367901.2,42400,56789.0,0.815,286.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.9
2020Q4,540123.4,306123.4,86234.5,20012.3,2901.2,110567.8,27123.4,-355.6,98123.4,107456.7,1.036,1.035,1.031,1.031,1.031,1.031,1.011,5.1,6844,6495,5308,98.2,0.06,0.66,117.3,1024901.2,0.921,286901.2,67012.3,353901.2,500012.3,1366789.0,48123.4,24789.0,13556.7,82012.3,10256,2578,5355,97.7,100.1,100.3,2.40,1.007,70.5,0.10,98.0,0.979,79012.3,39456.7,1355.6,355.6,0.306,0.136,10123.4,98555.5,0.30,0.18,0.65,0.55,539500.0,34567.8,0.138,1355678.9,578123.4,442789.0,14789.0,10123.4,25901.2,4178.9,39456.7,39456.7,1856000,1944567.8,356000,370123.4,42600,57901.2,0.815,287.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.8
2021Q1,542345.6,307890.1,87012.3,20234.5,2945.6,110678.9,27234.5,-366.7,98789.0,108012.3,1.038,1.037,1.032,1.032,1.032,1.032,1.013,5.0,6855,6510,5320,98.5,0.05,0.64,117.9,1028234.5,0.934,288234.5,67789.0,355234.5,503123.4,1377890.1,48456.7,25012.3,13667.8,82234.5,10258,2589,5366,97.9,100.2,100.5,2.38,1.009,69.2,0.10,98.5,0.982,80023.4,39901.2,1366.7,366.7,0.307,0.137,10234.5,99000.0,0.30,0.18,0.65,0.82,541000.0,35678.9,0.140,1366789.0,581567.8,446345.6,15012.3,10234.5,26123.4,4245.6,39901.2,39901.2,1858000,1955678.9,358000,372345.6,42800,59012.3,0.815,287.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.7
2021Q2,543567.8,308678.9,87789.0,20456.7,3012.3,110789.0,27345.6,-377.8,99456.7,108567.8,1.039,1.038,1.033,1.033,1.033,1.033,1.015,4.9,6866,6523,5332,98.8,0.04,0.62,118.5,1031567.8,0.947,289567.8,68567.8,356567.8,506234.5,1388901.2,48789.0,25234.5,13778.9,82456.7,10260,2600,5377,98.1,100.3,100.7,2.36,1.011,67.9,0.10,99.0,0.985,81034.5,40345.6,1377.8,377.8,0.308,0.138,10345.6,99444.4,0.30,0.18,0.65,0.95,542500.0,36789.0,0.142,1377890.1,585012.3,449901.2,15234.5,10345.6,26345.6,4312.3,40345.6,40345.6,1860000,1966789.0,360000,374567.8,43000,60123.4,0.815,288.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.6
2021Q3,544789.0,309456.7,88567.8,20678.9,3078.9,110901.2,27456.7,-389.0,100123.4,109123.4,1.041,1.040,1.034,1.034,1.034,1.034,1.017,4.8,6877,6536,5344,99.1,0.03,0.60,119.1,1034901.2,0.960,290901.2,69345.6,357901.2,509345.6,1399012.3,49123.4,25456.7,13890.1,82678.9,10262,2611,5388,98.3,100.4,100.9,2.34,1.013,66.6,0.10,99.5,0.988,82045.6,40789.0,1389.0,389.0,0.309,0.139,10456.7,99888.9,0.30,0.18,0.65,1.08,543500.0,37901.2,0.144,1388901.2,588456.7,453456.7,15456.7,10456.7,26567.8,4378.9,40789.0,40789.0,1862000,1977890.1,362000,376789.0,43200,61234.5,0.815,288.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.5
2021Q4,546012.3,310234.5,89345.6,20901.2,3145.6,111012.3,27567.8,-400.1,100789.0,109678.9,1.042,1.041,1.035,1.035,1.035,1.035,1.019,4.7,6888,6549,5356,99.4,0.02,0.58,119.7,1038234.5,0.973,292234.5,70123.4,359234.5,512456.7,1410123.4,49456.7,25678.9,14001.2,82901.2,10264,2622,5399,98.5,100.5,101.1,2.32,1.015,65.3,0.10,100.0,0.991,83056.7,41234.5,1400.1,400.1,0.310,0.140,10567.8,100333.3,0.30,0.18,0.65,1.21,544500.0,39012.3,0.146,1399012.3,591901.2,457012.3,15678.9,10567.8,26789.0,4445.6,41234.5,41234.5,1864000,1988901.2,364000,379012.3,43400,62345.6,0.815,289.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.4
2022Q1,547234.5,311012.3,90123.4,21123.4,3212.3,111123.4,27678.9,-411.2,101456.7,110234.5,1.044,1.043,1.036,1.036,1.036,1.036,1.021,4.6,6899,6562,5368,99.7,0.01,0.56,120.3,1041567.8,0.986,293567.8,70901.2,360567.8,515567.8,1421234.5,49789.0,25901.2,14112.3,83123.4,10266,2633,5410,98.7,100.6,101.3,2.30,1.017,64.0,0.10,100.5,0.994,84067.8,41678.9,1411.2,411.2,0.311,0.141,10678.9,100777.8,0.30,0.18,0.65,1.34,545500.0,40123.4,0.148,1410123.4,595345.6,460567.8,15901.2,10678.9,27012.3,4512.3,41678.9,41678.9,1866000,1999012.3,366000,381234.5,43600,63456.7,0.815,289.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.3
2022Q2,548456.7,311789.0,90901.2,21345.6,3278.9,111234.5,27789.0,-422.3,102123.4,110789.0,1.045,1.044,1.037,1.037,1.037,1.037,1.023,4.5,6910,6575,5380,100.0,0.01,0.54,120.9,1044901.2,0.999,294901.2,71678.9,361901.2,518678.9,1432345.6,50123.4,26123.4,14223.4,83345.6,10268,2644,5421,98.9,100.7,101.5,2.28,1.019,62.7,0.10,101.0,0.997,85078.9,42123.4,1422.3,422.3,0.312,0.142,10789.0,101222.2,0.30,0.18,0.65,1.47,546500.0,41234.5,0.150,1421234.5,598789.0,464123.4,16123.4,10789.0,27234.5,4578.9,42123.4,42123.4,1868000,2010123.4,368000,383456.7,43800,64567.8,0.815,290.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.2
2022Q3,549678.9,312567.8,91678.9,21567.8,3345.6,111345.6,27901.2,-433.4,102789.0,111345.6,1.047,1.046,1.038,1.038,1.038,1.038,1.025,4.4,6921,6588,5392,100.3,0.01,0.52,121.5,1048234.5,1.012,296234.5,72456.7,363234.5,521789.0,1443456.7,50456.7,26345.6,14334.5,83567.8,10270,2655,5432,99.1,100.8,101.7,2.26,1.021,61.4,0.10,101.5,1.000,86089.0,42567.8,1433.4,433.4,0.313,0.143,10901.2,101666.7,0.30,0.18,0.65,1.60,547500.0,42345.6,0.152,1432345.6,602234.5,467678.9,16345.6,10901.2,27456.7,4645.6,42567.8,42567.8,1870000,2021234.5,370000,385678.9,44000,65678.9,0.815,290.5,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.1
2022Q4,550901.2,313345.6,92456.7,21789.0,3412.3,111456.7,28012.3,-444.5,103456.7,111901.2,1.048,1.047,1.039,1.039,1.039,1.039,1.027,4.3,6932,6601,5404,100.6,0.01,0.50,122.1,1051567.8,1.025,297567.8,73234.5,364567.8,524901.2,1454567.8,50789.0,26567.8,14445.6,83789.0,10272,2666,5443,99.3,100.9,101.9,2.24,1.023,60.1,0.10,102.0,1.003,87101.2,43012.3,1444.5,444.5,0.314,0.144,11012.3,102111.1,0.30,0.18,0.65,1.73,548500.0,43456.7,0.154,1443456.7,605678.9,471234.5,16567.8,11012.3,27678.9,4712.3,43012.3,43012.3,1872000,2032345.6,372000,387901.2,44200,66789.0,0.815,291.0,100.0,3.5,100.0,0.35,0.60,2.5,0.05,1.0
2023Q1,552123.4,314123.4,93234.5,22012.3,3478.9,111567.8,28123.4,-455.6,104123.4,112456.7,1.050,1.049,1.040,1.040,1.040,1.040,1.029,4.2,6943,6614,5416,100.9,0.01,0.48,122.7,1054901.2,1import numpy as np
import pandas as pd
from scipy import stats
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from statsmodels.tsa.stattools import coint, adfuller
import json
import warnings
warnings.filterwarnings('ignore')

class RealDataParameterEstimator:
    """
    実データから統計的にパラメータを推定するクラス
    エラー時のデフォルト値設定を排除し、実際の推定結果のみを使用
    """
    
    def __init__(self, data_path=None):
        self.data = None
        self.parameters = {}
        self.equations = {}
        self.estimation_results = {}  # 推定の詳細結果を保存
        
        if data_path:
            self.load_data(data_path)
    
    def load_data_from_text(self, csv_content):
        """テキスト形式のCSVデータを読み込み"""
        from io import StringIO
        
        self.data = pd.read_csv(StringIO(csv_content), index_col=0)
        self.data.index = pd.to_datetime(self.data.index)
        
        print(f"データ読み込み完了: {len(self.data)}行 × {len(self.data.columns)}列")
        print(f"期間: {self.data.index[0].strftime('%Y-%m')} から {self.data.index[-1].strftime('%Y-%m')}")
        
        self.prepare_variables()
    
    def load_data(self, data_path):
        """CSVファイルからデータを読み込み"""
        self.data = pd.read_csv(data_path, index_col=0, parse_dates=True)
        print(f"データ読み込み完了: {len(self.data)}行 × {len(self.data.columns)}列")
        self.prepare_variables()
    
    def prepare_variables(self):
        """推定用の変数を準備"""
        print("変数変換を開始...")
        
        # 対数変換
        log_vars = ['GDP', 'CP', 'IFP', 'IHP', 'XGS', 'MGS', 'YWV', 'YDV', 'NWCV']
        for var in log_vars:
            if var in self.data.columns:
                # ゼロや負の値をチェック
                if (self.data[var] <= 0).any():
                    print(f"警告: {var}に非正の値があります。対数変換をスキップします。")
                    continue
                self.data[f'log_{var}'] = np.log(self.data[var])
                print(f"  {var} → log_{var} 変換完了")
        
        # 対数差分
        diff_vars = ['GDP', 'CP', 'IFP', 'IHP', 'XGS', 'MGS', 'PGDP', 'PCP']
        for var in diff_vars:
            if f'log_{var}' in self.data.columns:
                self.data[f'dlog_{var}'] = self.data[f'log_{var}'].diff()
                print(f"  dlog_{var} 計算完了")
            elif var in self.data.columns:
                self.data[f'dlog_{var}'] = np.log(self.data[var]).diff()
                print(f"  dlog_{var} 計算完了（直接）")
        
        # 実質化
        if all(var in self.data.columns for var in ['YDV', 'PCP', 'NWCV']):
            self.data['YDV_real'] = self.data['YDV'] / self.data['PCP']
            self.data['NWCV_real'] = self.data['NWCV'] / self.data['PCP']
            print("  実質所得・実質資産 計算完了")
        
        # ラグ変数
        lag_vars = ['GDP', 'CP', 'IFP', 'YDV', 'NWCV', 'PGDP', 'RCD', 'RGB', 'UR', 'PSHARE', 'WD_YVI', 'FXS']
        for var in lag_vars:
            if var in self.data.columns:
                self.data[f'{var}_lag1'] = self.data[var].shift(1)
                self.data[f'{var}_lag2'] = self.data[var].shift(2)
        
        # 成長率変数
        growth_vars = ['PSHARE', 'WD_YVI', 'FXS']
        for var in growth_vars:
            if var in self.data.columns:
                self.data[f'{var}_growth'] = self.data[var].pct_change()
                print(f"  {var}_growth 計算完了")
        
        # 差分変数
        diff_simple_vars = ['RCD', 'RGB', 'UR']
        for var in diff_simple_vars:
            if var in self.data.columns:
                self.data[f'd_{var}'] = self.data[var].diff()
        
        print("変数変換完了\n")
    
    def check_stationarity(self, series, variable_name):
        """系列の定常性をADF検定でチェック"""
        try:
            result = adfuller(series.dropna())
            p_value = result[1]
            is_stationary = p_value < 0.05
            print(f"  {variable_name}: ADF統計量={result[0]:.3f}, p値={p_value:.3f}, 定常性={'あり' if is_stationary else 'なし'}")
            return is_stationary
        except:
            print(f"  {variable_name}: 定常性検定失敗")
            return False
    
    def estimate_consumption_function(self):
        """消費関数のパラメータ推定（実データベース）"""
        print("=" * 50)
        print("1. 消費関数の推定")
        print("=" * 50)
        
        # 必要な変数の存在確認
        required_vars = ['log_CP', 'log_YDV', 'log_NWCV']
        missing_vars = [var for var in required_vars if var not in self.data.columns]
        
        if missing_vars:
            print(f"エラー: 必要な変数が不足しています: {missing_vars}")
            print("消費関数の推定をスキップします。")
            return False
        
        # データの準備
        consumption_data = self.data[required_vars].dropna()
        
        if len(consumption_data) < 8:  # 最低限必要なサンプル数
            print(f"エラー: 有効なデータが不足しています（{len(consumption_data)}行）")
            print("消費関数の推定をスキップします。")
            return False
        
        print(f"使用データ: {len(consumption_data)}行")
        
        # 定常性の確認
        print("\n定常性検定:")
        self.check_stationarity(consumption_data['log_CP'], 'log_CP')
        self.check_stationarity(consumption_data['log_YDV'], 'log_YDV')
        self.check_stationarity(consumption_data['log_NWCV'], 'log_NWCV')
        
        try:
            # ステップ1: 長期均衡関係の推定
            print("\n【長期均衡関係の推定】")
            y_long = consumption_data['log_CP']
            X_long = consumption_data[['log_YDV', 'log_NWCV']]
            X_long = sm.add_constant(X_long)
            
            model_long = sm.OLS(y_long, X_long).fit()
            
            # 共和分検定
            try:
                residuals = model_long.resid
                coint_stat, coint_p = coint(consumption_data['log_CP'], 
                                          consumption_data[['log_YDV', 'log_NWCV']])[:2]
                print(f"共和分検定: 統計量={coint_stat:.3f}, p値={coint_p:.3f}")
            except:
                print("共和分検定に失敗しました")
            
            # 結果の表示
            print(f"R-squared: {model_long.rsquared:.4f}")
            print(f"調整済みR-squared: {model_long.rsquared_adj:.4f}")
            print(f"F統計量: {model_long.fvalue:.3f} (p値: {model_long.f_pvalue:.3f})")
            
            income_elasticity = model_long.params.get('log_YDV', np.nan)
            wealth_elasticity = model_long.params.get('log_NWCV', np.nan)
            
            print(f"\n推定結果:")
            print(f"  所得弾力性: {income_elasticity:.4f} (t値: {model_long.tvalues.get('log_YDV', 0):.2f})")
            print(f"  資産弾力性: {wealth_elasticity:.4f} (t値: {model_long.tvalues.get('log_NWCV', 0):.2f})")
            
            # エラー修正項の計算
            ecm_term = model_long.resid
            
            # ステップ2: 短期動学の推定
            if 'dlog_CP' in self.data.columns:
                print("\n【短期動学の推定】")
                
                # データの準備
                short_data = pd.DataFrame({
                    'dlog_CP': self.data['dlog_CP'],
                    'ecm_lag1': ecm_term.shift(1),
                    'dlog_YDV': self.data.get('dlog_YDV', np.nan),
                    'dlog_YDV_lag1': self.data.get('dlog_YDV', pd.Series()).shift(1),
                    'd_RGB': self.data.get('d_RGB', np.nan)
                }).dropna()
                
                if len(short_data) >= 5:
                    y_short = short_data['dlog_CP']
                    X_short_vars = []
                    
                    # 説明変数の選択（有効なもののみ）
                    if 'ecm_lag1' in short_data.columns and short_data['ecm_lag1'].notna().sum() > 0:
                        X_short_vars.append('ecm_lag1')
                    if 'dlog_YDV_lag1' in short_data.columns and short_data['dlog_YDV_lag1'].notna().sum() > 0:
                        X_short_vars.append('dlog_YDV_lag1')
                    if 'd_RGB' in short_data.columns and short_data['d_RGB'].notna().sum() > 0:
                        X_short_vars.append('d_RGB')
                    
                    if X_short_vars:
                        X_short = short_data[X_short_vars]
                        X_short = sm.add_constant(X_short)
                        
                        model_short = sm.OLS(y_short, X_short).fit()
                        
                        print(f"R-squared: {model_short.rsquared:.4f}")
                        print(f"調整済みR-squared: {model_short.rsquared_adj:.4f}")
                        
                        adjustment_speed = model_short.params.get('ecm_lag1', np.nan)
                        income_short = model_short.params.get('dlog_YDV_lag1', np.nan)
                        interest_effect = model_short.params.get('d_RGB', np.nan)
                        
                        print(f"\n短期動学結果:")
                        print(f"  調整速度: {adjustment_speed:.4f} (t値: {model_short.tvalues.get('ecm_lag1', 0):.2f})")
                        print(f"  短期所得効果: {income_short:.4f} (t値: {model_short.tvalues.get('dlog_YDV_lag1', 0):.2f})")
                        print(f"  金利効果: {interest_effect:.4f} (t値: {model_short.tvalues.get('d_RGB', 0):.2f})")
                        
                        # パラメータの保存（実際の推定値のみ）
                        self.parameters['consumption'] = {
                            'income_elasticity': float(income_elasticity) if not np.isnan(income_elasticity) else None,
                            'wealth_elasticity': float(wealth_elasticity) if not np.isnan(wealth_elasticity) else None,
                            'adjustment_speed': float(adjustment_speed) if not np.isnan(adjustment_speed) else None,
                            'income_short1': float(income_short) if not np.isnan(income_short) else None,
                            'interest_rate': float(interest_effect) if not np.isnan(interest_effect) else None
                        }
                        
                        # 推定結果の詳細を保存
                        self.estimation_results['consumption'] = {
                            'long_run_model': model_long,
                            'short_run_model': model_short,
                            'sample_size': len(consumption_data),
                            'r_squared_long': model_long.rsquared,
                            'r_squared_short': model_short.rsquared
                        }
                        
                        print(f"\n✓ 消費関数の推定が完了しました")
                        return True
            
            # 短期動学が推定できない場合は長期関係のみ
            self.parameters['consumption'] = {
                'income_elasticity': float(income_elasticity) if not np.isnan(income_elasticity) else None,
                'wealth_elasticity': float(wealth_elasticity) if not np.isnan(wealth_elasticity) else None,
                'adjustment_speed': None,
                'income_short1': None,
                'interest_rate': None
            }
            
            self.estimation_results['consumption'] = {
                'long_run_model': model_long,
                'short_run_model': None,
                'sample_size': len(consumption_data),
                'r_squared_long': model_long.rsquared,
                'r_squared_short': None
            }
            
            print(f"\n✓ 消費関数の長期関係のみ推定完了")
            return True
            
        except Exception as e:
            print(f"消費関数推定でエラーが発生しました: {e}")
            print("この関数の推定をスキップします。")
            return False
    
    def estimate_investment_function(self):
        """設備投資関数のパラメータ推定（実データベース）"""
        print("\n" + "=" * 50)
        print("2. 設備投資関数の推定")
        print("=" * 50)
        
        # 必要な変数の確認
        if 'dlog_IFP' not in self.data.columns:
            print("エラー: dlog_IFP（投資成長率）が見つかりません")
            return False
        
        # 説明変数の準備
        explanatory_vars = []
        
        # 株価効果（トービンのq）
        if 'PSHARE_growth' in self.data.columns:
            explanatory_vars.append('PSHARE_growth')
        elif 'PSHARE' in self.data.columns:
            self.data['PSHARE_growth_4q'] = self.data['PSHARE'].pct_change(4)  # 年率
            explanatory_vars.append('PSHARE_growth_4q')
        
        # 金利効果
        if 'd_RCD' in self.data.columns:
            explanatory_vars.append('d_RCD')
        if 'RCD_lag1' in self.data.columns and 'd_RCD' in self.data.columns:
            self.data['d_RCD_lag1'] = self.data['d_RCD'].shift(1)
            explanatory_vars.append('d_RCD_lag1')
        
        if not explanatory_vars:
            print("エラー: 有効な説明変数が見つかりません")
            return False
        
        # データの準備
        model_vars = ['dlog_IFP'] + explanatory_vars
        investment_data = self.data[model_vars].dropna()
        
        if len(investment_data) < 6:
            print(f"エラー: 有効なデータが不足しています（{len(investment_data)}行）")
            return False
        
        print(f"使用データ: {len(investment_data)}行")
        print(f"説明変数: {explanatory_vars}")
        
        try:
            # 回帰分析の実行
            y = investment_data['dlog_IFP']
            X = investment_data[explanatory_vars]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X).fit()
            
            # 結果の表示
            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquared_adj:.4f}")
            print(f"F統計量: {model.fvalue:.3f} (p値: {model.f_pvalue:.3f})")
            
            print(f"\n推定結果:")
            for var in explanatory_vars:
                if var in model.params.index:
                    coef = model.params[var]
                    t_val = model.tvalues[var]
                    p_val = model.pvalues[var]
                    print(f"  {var}: {coef:.4f} (t値: {t_val:.2f}, p値: {p_val:.3f})")
            
            # パラメータの保存
            q_elasticity = model.params.get('PSHARE_growth', model.params.get('PSHARE_growth_4q', np.nan))
            interest_rate = model.params.get('d_RCD', np.nan)
            interest_rate_lag = model.params.get('d_RCD_lag1', np.nan)
            
            self.parameters['investment'] = {
                'q_elasticity': float(q_elasticity) if not np.isnan(q_elasticity) else None,
                'interest_rate': float(interest_rate) if not np.isnan(interest_rate) else None,
                'interest_rate_lag': float(interest_rate_lag) if not np.isnan(interest_rate_lag) else None
            }
            
            self.estimation_results['investment'] = {
                'model': model,
                'sample_size': len(investment_data),
                'r_squared': model.rsquared,
                'explanatory_vars': explanatory_vars
            }
            
            print(f"\n✓ 設備投資関数の推定が完了しました")
            return True
            
        except Exception as e:
            print(f"設備投資関数推定でエラーが発生しました: {e}")
            return False
    
    def estimate_export_function(self):
        """輸出関数のパラメータ推定（実データベース）"""
        print("\n" + "=" * 50)
        print("3. 輸出関数の推定")
        print("=" * 50)
        
        if 'dlog_XGS' not in self.data.columns:
            print("エラー: dlog_XGS（輸出成長率）が見つかりません")
            return False
        
        # 説明変数の準備
        explanatory_vars = []
        
        # 世界需要
        if 'WD_YVI_growth' in self.data.columns:
            explanatory_vars.append('WD_YVI_growth')
        elif 'WD_YVI' in self.data.columns:
            self.data['WD_YVI_growth'] = self.data['WD_YVI'].pct_change()
            explanatory_vars.append('WD_YVI_growth')
        
        # 為替レート
        if 'FXS_growth' in self.data.columns:
            explanatory_vars.append('FXS_growth')
        elif 'FXS' in self.data.columns:
            self.data['FXS_growth'] = self.data['FXS'].pct_change()
            explanatory_vars.append('FXS_growth')
        
        if not explanatory_vars:
            print("エラー: 有効な説明変数が見つかりません")
            return False
        
        # データの準備
        model_vars = ['dlog_XGS'] + explanatory_vars
        export_data = self.data[model_vars].dropna()
        
        if len(export_data) < 5:
            print(f"エラー: 有効なデータが不足しています（{len(export_data)}行）")
            return False
        
        print(f"使用データ: {len(export_data)}行")
        print(f"説明変数: {explanatory_vars}")
        
        try:
            y = export_data['dlog_XGS']
            X = export_data[explanatory_vars]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X).fit()
            
            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquared_adj:.4f}")
            
            print(f"\n推定結果:")
            for var in explanatory_vars:
                if var in model.params.index:
                    coef = model.params[var]
                    t_val = model.tvalues[var]
                    print(f"  {var}: {coef:.4f} (t値: {t_val:.2f})")
            
            # パラメータの保存
            world_demand_elasticity = model.params.get('WD_YVI_growth', np.nan)
            exchange_rate_elasticity = model.params.get('FXS_growth', np.nan)
            
            self.parameters['export'] = {
                'world_demand_elasticity': float(world_demand_elasticity) if not np.isnan(world_demand_elasticity) else None,
                'exchange_rate_elasticity': float(exchange_rate_elasticity) if not np.isnan(exchange_rate_elasticity) else None
            }
            
            self.estimation_results['export'] = {
                'model': model,
                'sample_size': len(export_data),
                'r_squared': model.rsquared
            }
            
            print(f"\n✓ 輸出関数の推定が完了しました")
            return True
            
        except Exception as e:
            print(f"輸出関数推定でエラーが発生しました: {e}")
            return False
    
    def estimate_phillips_curve(self):
        """フィリップス曲線のパラメータ推定（実データベース）"""
        print("\n" + "=" * 50)
        print("4. フィリップス曲線の推定")
        print("=" * 50)
        
        if 'dlog_PGDP' not in self.data.columns:
            print("エラー: dlog_PGDP（インフレ率）が見つかりません")
            return False
        
        # 説明変数の準備
        explanatory_vars = []
        
        # ラグ付きインフレ率（慣性項）
        if 'dlog_PGDP' in self.data.columns:
            self.data['dlog_PGDP_lag1'] = self.data['dlog_PGDP'].shift(1)
            explanatory_vars.append('dlog_PGDP_lag1')
        
        # GDPギャップ
        if 'GDPGAP' in self.data.columns:
            explanatory_vars.append('GDPGAP')
            # ラグ項も追加
            self.data['GDPGAP_lag1'] = self.data['GDPGAP'].shift(1)
            explanatory_vars.append('GDPGAP_lag1')
        
        # 貨幣供給効果
        if all(var in self.data.columns for var in ['M2CD', 'GDP']):
            self.data['m2_gdp_ratio'] = self.data['M2CD'] / self.data['GDP']
            self.data['dlog_m2_gdp'] = np.log(self.data['m2_gdp_ratio']).diff()
            explanatory_vars.append('dlog_m2_gdp')
        
        if not explanatory_vars:
            print("エラー: 有効な説明変数が見つかりません")
            return False
        
        # データの準備
        model_vars = ['dlog_PGDP'] + explanatory_vars
        phillips_data = self.data[model_vars].dropna()
        
        if len(phillips_data) < 5:
            print(f"エラー: 有効なデータが不足しています（{len(phillips_data)}行）")
            return False
        
        print(f"使用データ: {len(phillips_data)}行")
        print(f"説明変数: {explanatory_vars}")
        
        try:
            y = phillips_data['dlog_PGDP']
            X = phillips_data[explanatory_vars]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X).fit()
            
            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquared_adj:.4f}")
            
            print(f"\n推定結果:")
            for var in explanatory_vars:
                if var in model.params.index:
                    coef = model.params[var]
                    t_val = model.tvalues[var]
                    print(f"  {var}: {coef:.4f} (t値: {t_val:.2f})")
            
            # パラメータの保存
            inertia = model.params.get('dlog_PGDP_lag1', np.nan)
            gap_sensitivity = model.params.get('GDPGAP', model.params.get('GDPGAP_lag1', np.nan))
            money_sensitivity = model.params.get('dlog_m2_gdp', np.nan)
            
            self.parameters['phillips_curve'] = {
                'inertia': float(inertia) if not np.isnan(inertia) else None,
                'gap_sensitivity': float(gap_sensitivity) if not np.isnan(gap_sensitivity) else None,
                'money_sensitivity': float(money_sensitivity) if not np.isnan(money_sensitivity) else None
            }
            
            self.estimation_results['phillips_curve'] = {
                'model': model,
                'sample_size': len(phillips_data),
                'r_squared': model.rsquared
            }
            
            print(f"\n✓ フィリップス曲線の推定が完了しました")
            return True
            
        except Exception as e:
            print(f"フィリップス曲線推定でエラーが発生しました: {e}")
            return False
    
    def estimate_taylor_rule(self):
        """テイラールールのパラメータ推定（実データベース）"""
        print("\n" + "=" * 50)
        print("5. テイラールールの推定")
        print("=" * 50)
        
        if 'RCD' not in self.data.columns:
            print("エラー: RCD（政策金利）が見つかりません")
            return False
        
        # インフレ率の計算
        target_inflation = 2.0  # 目標インフレ率2%
        
        if 'inflation_rate' not in self.data.columns:
            if 'PGDP' in self.data.columns:
                self.data['inflation_rate'] = self.data['PGDP'].pct_change(4) * 100  # 年率%
            else:
                print("エラー: インフレ率データが見つかりません")
                return False
        
        # 説明変数の準備
        explanatory_vars = []
        
        # 金利の慣性項
        if 'RCD' in self.data.columns:
            self.data['RCD_lag1'] = self.data['RCD'].shift(1)
            explanatory_vars.append('RCD_lag1')
        
        # インフレギャップ
        self.data['inflation_gap'] = self.data['inflation_rate'] - target_inflation
        explanatory_vars.append('inflation_gap')
        
        # GDPギャップ
        if 'GDPGAP' in self.data.columns:
            explanatory_vars.append('GDPGAP')
        
        # ゼロ金利制約を考慮（正の金利期間のみ）
        valid_periods = self.data['RCD'] > 0.001
        
        model_vars = ['RCD'] + explanatory_vars
        taylor_data = self.data.loc[valid_periods, model_vars].dropna()
        
        if len(taylor_data) < 5:
            print(f"エラー: 有効なデータが不足しています（{len(taylor_data)}行）")
            return False
        
        print(f"使用データ: {len(taylor_data)}行（ゼロ金利期間を除く）")
        print(f"説明変数: {explanatory_vars}")
        
        try:
            y = taylor_data['RCD']
            X = taylor_data[explanatory_vars]
            X = sm.add_constant(X)
            
            model = sm.OLS(y, X).fit()
            
            print(f"\nR-squared: {model.rsquared:.4f}")
            print(f"調整済みR-squared: {model.rsquare